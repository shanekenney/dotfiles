" General
set nocompatible
set noswapfile
syntax enable
set number
set encoding=utf-8

" OmniSharp won't work without this setting
filetype plugin on

" Status bar
set laststatus=2
set showcmd
set ruler

set wildignore=.*

" Whitespace
set nowrap
set tabstop=4
set shiftwidth=4
set softtabstop=4
set linespace=3
set expandtab
set smartindent

set tabpagemax=100

" Buffer at top and bottom of file
" when scrolling
set scrolloff=5

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

filetype off

" Map Leader key to ,
let mapleader=","

" tag search location
set tags=./tags,tags;$HOME

" Vundle configuration
" Set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" Let Vundle manage Vundle
Bundle 'gmarik/vundle'

" Colorscheme
Bundle 'altercation/vim-colors-solarized'
set background=dark
colorscheme solarized

" Plugins
Bundle 'embear/vim-localvimrc'
Bundle 'ack.vim'
Bundle 'Tabular'
Bundle 'NrrwRgn'
Bundle 'scrooloose/syntastic'
Bundle 'scrooloose/nerdcommenter'
Bundle 'tpope/vim-dispatch'
Bundle 'shanekenney/omnisharp-vim'
Bundle 'bling/vim-airline'
Bundle 'tpope/vim-fugitive'
Bundle 'mattn/emmet-vim'
Bundle 'mhinz/vim-startify'
Bundle 'Shougo/neocomplete'
Bundle 'Shougo/vimproc'
Bundle 'Shougo/vimshell'
Bundle 'vim-scripts/matchit.zip'
Bundle 'wincent/Command-T'
Bundle 'nelstrom/vim-qargs'

" Language specific plugins
Bundle 'pangloss/vim-javascript'
Bundle 'mxw/vim-jsx'
"Bundle 'facebook/vim-flow'
"Bundle 'leafgarland/typescript-vim'
Bundle 'skammer/vim-css-color'
Bundle 'groenewege/vim-less'

filetype on
filetype plugin on

" Startify settings
" w for welcome screen
map <leader>w :Startify<cr>

" Command-T Settings
let g:CommandTWildIgnore=&wildignore . ",**/node_modules/*"
let g:CommandTWildIgnoreRoot = g:CommandTWildIgnore
let g:CommandTMaxHeight=10
let g:CommandTMinHeight=10

" localvimrc settings
let g:localvimrc_ask = 0
let g:localvimrc_sandbox = 0

" Flowtype settings
let g:flow#autoclose = 1

" Syntastic :Errors command conflicts with :Explore
command! E Ex

" Startify
let g:startify_list_order = [
            \ ['My Sessions:'],
            \ 'sessions',
            \ ['Recently used files'],
            \ 'files',
            \ ['Bookmarks:'],
            \ 'bookmarks',
            \ ]

"VimShell settings
"Open shell in new tab
map <leader>st :VimShellTab<cr>

"Pops shell in small buffer
map <leader>ss :VimShellPop<cr>

"New prompt message
let g:vimshell_prompt = ": "
let g:vimshell_user_prompt = "fnamemodify(getcwd(), \":~\")"

"Default editor
let g:vimshell_editor_command = "/usr/local/bin/macvim"

" Typescript Tools Settings
au BufRead,BufNewFile *.ts        setlocal filetype=typescript
set rtp+=/usr/local/lib/node_modules/typescript-tools/

" Omnisharp settings

"This is the default value, setting it isn't actually necessary
let g:OmniSharp_host = "http://localhost:2000"

"Set the type lookup function to use the preview window instead of the status line
"let g:OmniSharp_typeLookupInPreview = 1

"Timeout in seconds to wait for a response from the server
let g:OmniSharp_timeout = 1

"Showmatch significantly slows down omnicomplete
"when the first match contains parentheses.
set noshowmatch

"Super tab settings - uncomment the next 4 lines
"let g:SuperTabDefaultCompletionType = 'context'
"let g:SuperTabContextDefaultCompletionType = "<c-x><c-o>"
"let g:SuperTabDefaultCompletionTypeDiscovery = ["&omnifunc:<c-x><c-o>","&completefunc:<c-x><c-n>"]
"let g:SuperTabClosePreviewOnPopupClose = 1

"don't autoselect first item in omnicomplete, show if only one item (for preview)
"remove preview if you don't want to see any documentation whatsoever.
set completeopt=longest,menuone,preview
" Fetch full documentation during omnicomplete requests. 
" There is a performance penalty with this (especially on Mono)
" By default, only Type/Method signatures are fetched. Full documentation can still be fetched when
" you need it with the :OmniSharpDocumentation command.
" let g:omnicomplete_fetch_documentation=1

"Move the preview window (code documentation) to the bottom of the screen, so it doesn't move the code!
"You might also want to look at the echodoc plugin
set splitbelow

" Get Code Issues and syntax errors
let g:syntastic_cs_checkers = ['syntax', 'semantic', 'issues']

" this setting controls how long to wait (in ms) before fetching type / symbol information.
set updatetime=500
" Remove 'Press Enter to continue' message when type information is longer than one line.
set cmdheight=2

" Contextual code actions (requires CtrlP)
nnoremap <leader><space> :OmniSharpGetCodeActions<cr>
" Run code actions with text selected in visual mode to extract method
vnoremap <leader><space> :call OmniSharp#GetCodeActions('visual')<cr>

" rename with dialog
nnoremap <leader>nm :OmniSharpRename<cr>
nnoremap <F2> :OmniSharpRename<cr>      
" rename without dialog - with cursor on the symbol to rename... ':Rename newname'
command! -nargs=1 Rename :call OmniSharp#RenameTo("<args>")

" Force OmniSharp to reload the solution. Useful when switching branches etc.
nnoremap <leader>rl :OmniSharpReloadSolution<cr>
nnoremap <leader>cf :OmniSharpCodeFormat<cr>
" Load the current .cs file to the nearest project
nnoremap <leader>tp :OmniSharpAddToProject<cr>

" Add syntax highlighting for types and interfaces
nnoremap <leader>th :OmniSharpHighlightTypes<cr>
"Don't ask to save when changing buffers (i.e. when jumping to a type definition)
set hidden

" Omnisharp neocomplete settings
autocmd FileType cs setlocal omnifunc=OmniSharp#Complete
"Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Don't Use smartcase.
let g:neocomplete#enable_smart_case = 0
let g:neocomplete#enable_auto_close_preview = 0
" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist'
        \ }

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  "return neocomplete#close_popup() . "\<CR>"
  " For no inserting <CR> key.
  return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()

let g:neocomplete#enable_auto_select = 0
let g:neocomplete#disable_auto_complete = 0

" Enable heavy omni completion.

call neocomplete#custom#source('_', 'sorters', [])

if !exists('g:neocomplete#sources')
        let g:neocomplete#sources = {}
endif

if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif

let g:neocomplete#sources#omni#input_patterns.cs = '.*[^=\);]'
let g:neocomplete#sources#omni#input_patterns.cs = '[^.[:digit:] *\t]\.\w*'

let g:neocomplete#sources.cs = ['omni']
let g:neocomplete#enable_refresh_always = 0
let g:echodoc_enable_at_startup = 1
let g:neocomplete#enable_insert_char_pre = 1
